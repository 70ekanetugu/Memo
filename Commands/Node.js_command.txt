■基本フロー*********************************************************************************
$mkdir プロジェクト名		=>プロジェクトフォルダ(ルート)を作成する。
$npm init			=>作成するnodeアプリケーションの初期化(package.jsonの作成)
			　　	  色々設定聞かれる。
$npm install [オプション] モジュール名	=>モジュール(パッケージ)のインストール。

>>プログラム書く...		
$node ファイル名	=>jsファイルの実行


[実行(package.json)]----------------------------------------------------------------------
$npm start 		=>package.json内のスクリプトが実行される。
			  $node スクリプト名とやっていることは同じ。



[実行(REPLによる対話式実行環境]------------------------------------------------------------
>>その１
$node			=>Node.jsインタプリタ(REPL)が実行される。Rubyのirbみたいな感じ
>			=>javascriptの実行ができる。
proccess.exit();	=>Node.jsを終了。Ctrl+C×2回でもおｋ

>>その2
$node
>.editor		=>Ctrl+Dを押すまでエディター形式で記述可能。キャンセルはCtrl+C


■コマンド一覧*******************************************************************************
[npm関係]
$npm init	=>package.jsonの作成。対象のカレントディレクトリで行う。
		  全部yesでいいなら、-yオプション。

$npm install [オプション] パッケージ名	=>パッケージ(モジュール)のインストール
					  パッケージ名を省略すると、カレントディレクトリの
					  package.jsonに書かれた依存パッケージをインストールする。
	[オプション]
	-g 	: グローバルインストール。node全体の共通モジュールとなる。
	--save	: カレントプロジェクトのみのインストールとなる。
		  また、package.jsonの依存ライブラリ(モジュール)に書き込まれる。
		  複数人との共有や外部環境への移行考えているなら付けたほうがいい。
		  
$npm uninstall [オプション] パッケージ名　=>パッケージのアンインストール。
			　		　　オプション無ければカレントディレクトリが対象となる。
	[オプション]
	-g : グローバル
	--save : package.jsonからも消える。

$npm ls [オプション]	=>インストールされたパッケージ(モジュール)のリスト表示
	[オプション]
	-g : グローバルインストールを対象。
	
$npm update [パッケージ名] [オプション]	　=>パッケージのアップデート。
					　　パッケージ名省略でpackage.json内のパッケージ全て対象
	[オプション]
	-g : グローバル

$npm search パッケージ	=>キーワードに関するパッケージをnpmリポジトリから検索する。

$npm info パッケージ名	=>パッケージの詳細情報を表示する。


[node関係]-------------------------------------------------------------------------------------
$node --version		=>node.jsのバージョンを表示


