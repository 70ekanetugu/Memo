■基本フロー*********************************************************************************
$mkdir プロジェクト名		=>プロジェクトフォルダ(ルート)を作成する。
$npm init			=>作成するnodeアプリケーションの初期化(package.jsonの作成)
			　　	  色々設定聞かれる。
$npm install [オプション] モジュール名	=>モジュール(パッケージ)のインストール。

>>プログラム書く...		
$node ファイル名	=>jsファイルの実行

[実行(package.json)]----------------------------------------------------------------------
$npm start 		=>package.json内のscript:start:～のファイルが実行される。
			  $node スクリプト名とやっていることは同じ。


[実行(REPLによる対話式実行環境]------------------------------------------------------------
>>その１
$node			=>Node.jsインタプリタ(REPL)が実行される。Rubyのirbみたいな感じ
>			=>javascriptの実行ができる。
proccess.exit();	=>Node.jsを終了。Ctrl+C×2回でもおｋ

>>その2
$node
>.editor		=>Ctrl+Dを押すまでエディター形式で記述可能。キャンセルはCtrl+C

[mysql接続時メモ]--------------------------------------------------------------------------
・VSCodeから接続時(というより外部ターミナル?)
　=>パスワードの認証形式によっては単純なログインだと接続が拒否される。
   mysqlにログインして、"use mysql" -> select user,plugin from user;でログインしたいユーザーの
　 pluginカラムを見る。もし、caching_sha2_passwordとなっていると、SHA-256(ハッシュ関数の一種)
　 方式での認証になっている。これを使うなら、クライアント側もこれに対応させないといけない。
　 面倒なので、以下コマンドで、認証方式をnativeに変更すればおｋ。
$alter user 'ユーザー名'@'ホスト名' identified with mysql_native_password by 'パスワード';


■コマンド一覧*******************************************************************************
[npm関係]
$npm init	=>package.jsonの作成。対象のカレントディレクトリで行う。
		  全部yesでいいなら、-yオプション。

$npm install [オプション] パッケージ名	=>パッケージ(モジュール)のインストール
					  パッケージ名を省略すると、カレントディレクトリの
					  package.jsonに書かれた依存パッケージをインストールする。
	[オプション]
	-g 	: グローバルインストール。node全体の共通モジュールとなる。
	--save	: カレントプロジェクトのみのインストールとなる。
		  また、package.jsonの依存ライブラリ(モジュール)に書き込まれる。
		  複数人との共有や外部環境への移行考えているなら付けたほうがいい。
		  
$npm uninstall [オプション] パッケージ名　=>パッケージのアンインストール。
			　		　　オプション無ければカレントディレクトリが対象となる。
	[オプション]
	-g : グローバル
	--save : package.jsonからも消える。

$npm ls [オプション]	=>インストールされたパッケージ(モジュール)のリスト表示
	[オプション]
	-g : グローバルインストールを対象。
	
$npm update [パッケージ名] [オプション]	　=>パッケージのアップデート。
	[オプション]　			　　パッケージ名省略でpackage.json内のパッケージ全て対象。
	-g : グローバル			　　コード実行時、requireでエラー出る様なら、update試してみる。

$npm search パッケージ	=>キーワードに関するパッケージをnpmリポジトリから検索する。

$npm info パッケージ名	=>パッケージの詳細情報を表示する。


[node関係]-------------------------------------------------------------------------------------
$node --version		=>node.jsのバージョンを表示



■他色々***************************************************************************************
[Node.js]
＠概要
・javascriptの実行環境。(apachやtomcatに代わるサーバや、組込みのプラットフォームとして使われる)
エンジンはGoogleのV8を使用。
使用するコードは当然ながらjavascriptであり、基本的にモジュールの組み合わせで使用する。
具体的には、各jsファイルをmodule.exportsでモジュール化し、モジュール使用箇所でrequireする。
exportsはメソッド単体にも使用できるが、基本的には各ファイルの上位オブジェクトに各メソッドをバインドし、
上位オブジェクトをモジュール化する。
ECMAScriptやAltJSで書かれることが多い?Reactもよく使われる。

[Expressフレームワーク]
＠概要
・最小限のwebフレームワーク。ルーティングとミドルウェア関数呼出し機能から成り立つ。
express-genで基礎フレーム毎使うのが一般的。初期設定ではエントリポイントはbin/www。
実コードは以下の通り。
・expressモジュールのrequire
・各使用モジュールのrequire
・アプリケーションのインスタンス化。
　=>var app=express()　※constにすべきかはよくわからない。
・ミドルウェア関数の登録(ロード)。記述準に実行される為、注意!!
　=>app.use(ﾐﾄﾞﾙｳｪｱ関数),app.use(ﾙｰﾄﾊﾟｽ,ﾐﾄﾞﾙｳｪｱ関数...),app.all(ﾊﾟｽ,ﾐﾄﾞﾙｳｪｱ),app.get()など。
・各ﾐﾄﾞﾙｳｪｱ定義を書いた後に、ルーティング用ﾐﾄﾞﾙｳｪｱ関数を書く。
　=>app.use(ﾙｰﾄ,ﾓｼﾞｭｰﾙ)  ※モジュールは、requireしたjsファイル。勿論そのまま関数定義してもいい。
・エラー関係のﾐﾄﾞﾙｳｪｱ関数定義。
・module.exports=app　とし、bin/wwwから呼び出せるようにする。(必須)
＠ﾙｰﾃｨﾝｸﾞ
・httpリクエストとエンドポイントのマッピング。
・またパラメータも設定できる。
　=>"/user:id"とした場合、URLが(http～～/user/25)であれば、app.get('/user:id)'..)が呼び出され、
　　req.params.idで25にアクセスできる。
＠ﾐﾄﾞﾙｳｪｱ関数
・httpリクエスト～レスポンスサイクル中に割り込ませる関数の事。コールバック関数(ハンドラ関数とも)
・app.use(),app.all(),app.Methods()などでappオブジェクトにバインドする。
・基本的にメインアプリケーション(app.js)で共通するモジュールをロードし、サブアプリケーションで、
　それぞれに必要なモジュールをロードする。
・１つのﾙｰﾄﾊﾟｽに複数のﾐﾄﾞﾙｳｪｱをバインドする場合、next()を記述する必要がある。
　これが無いと、1つ目のﾐﾄﾞﾙｳｪｱ関数が終わると、リクエストがハングしてしまう。







